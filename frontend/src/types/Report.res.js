// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function toJson(report) {
  var json = {};
  json["id"] = report.id;
  json["title"] = report.title;
  var desc = report.description;
  if (desc !== undefined) {
    json["description"] = desc;
  }
  json["analysisId"] = report.analysisId;
  var visualizationsJson = (function (__x) {
        return Belt_Array.map(__x, (function (v) {
                      return v;
                    }));
      })(report.visualizations);
  json["visualizations"] = visualizationsJson;
  var insightsJson = Belt_Array.map(report.insights, (function (insight) {
          var insightDict = {};
          insightDict["id"] = insight.id;
          insightDict["title"] = insight.title;
          insightDict["content"] = insight.content;
          insightDict["type"] = insight.type_;
          insightDict["confidence"] = insight.confidence;
          var sourcesJson = Belt_Array.map(insight.sources, (function (s) {
                  return s;
                }));
          insightDict["sources"] = sourcesJson;
          insightDict["createdAt"] = insight.createdAt.toISOString();
          return insightDict;
        }));
  json["insights"] = insightsJson;
  json["status"] = report.status;
  json["createdAt"] = report.createdAt.toISOString();
  json["updatedAt"] = report.updatedAt.toISOString();
  return json;
}

function fromJson(json) {
  var dict = Belt_Option.getWithDefault(Js_json.decodeObject(json), {});
  var id = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "id"), Js_json.decodeString), "");
  var title = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "title"), Js_json.decodeString), "");
  var description = Belt_Option.flatMap(Js_dict.get(dict, "description"), Js_json.decodeString);
  var analysisId = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "analysisId"), Js_json.decodeString), "");
  var visualizationsJson = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "visualizations"), Js_json.decodeArray), []);
  var visualizations = Belt_Array.keep(Belt_Array.map(visualizationsJson, (function (item) {
              return Belt_Option.getWithDefault(Js_json.decodeString(item), "");
            })), (function (s) {
          return s !== "";
        }));
  var insightsJson = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "insights"), Js_json.decodeArray), []);
  var insights = Belt_Array.map(insightsJson, (function (insightJson) {
          var insightDict = Belt_Option.getWithDefault(Js_json.decodeObject(insightJson), {});
          var insightId = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "id"), Js_json.decodeString), "");
          var insightTitle = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "title"), Js_json.decodeString), "");
          var content = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "content"), Js_json.decodeString), "");
          var type_ = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "type"), Js_json.decodeString), "finding");
          var confidence = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "confidence"), Js_json.decodeNumber), 0.0);
          var sourcesJson = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "sources"), Js_json.decodeArray), []);
          var sources = Belt_Array.keep(Belt_Array.map(sourcesJson, (function (item) {
                      return Belt_Option.getWithDefault(Js_json.decodeString(item), "");
                    })), (function (s) {
                  return s !== "";
                }));
          var createdAtStr = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(insightDict, "createdAt"), Js_json.decodeString), "");
          var createdAt = createdAtStr !== "" ? new Date(createdAtStr) : new Date();
          return {
                  id: insightId,
                  title: insightTitle,
                  content: content,
                  type_: type_,
                  confidence: confidence,
                  sources: sources,
                  createdAt: createdAt
                };
        }));
  var status = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "status"), Js_json.decodeString), "Completed");
  var createdAtStr = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "createdAt"), Js_json.decodeString), "");
  var createdAt = createdAtStr !== "" ? new Date(createdAtStr) : new Date();
  var updatedAtStr = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "updatedAt"), Js_json.decodeString), "");
  var updatedAt = updatedAtStr !== "" ? new Date(updatedAtStr) : new Date();
  return {
          id: id,
          title: title,
          description: description,
          analysisId: analysisId,
          visualizations: visualizations,
          insights: insights,
          status: status,
          createdAt: createdAt,
          updatedAt: updatedAt
        };
}

function reportGenerationRequestToJson(request) {
  var json = {};
  json["analysisId"] = request.analysisId;
  json["title"] = request.title;
  var desc = request.description;
  if (desc !== undefined) {
    json["description"] = desc;
  }
  json["includeVisualization"] = request.includeVisualization;
  var visualizationTypesJson = Belt_Array.map(request.visualizationTypes, (function (v) {
          return v;
        }));
  json["visualizationTypes"] = visualizationTypesJson;
  json["includeFindings"] = request.includeFindings;
  json["includeSummary"] = request.includeSummary;
  json["includeRecommendations"] = request.includeRecommendations;
  var prompt = request.customPrompt;
  if (prompt !== undefined) {
    json["customPrompt"] = prompt;
  }
  return json;
}

export {
  toJson ,
  fromJson ,
  reportGenerationRequestToJson ,
}
/* No side effect */
